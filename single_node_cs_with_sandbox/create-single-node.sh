#!/bin/bash
# Copyright (C) 2018 MariaDB Corporation
# Creates a templatized master-slave cluster fronted by MaxScale in Kubernetes
# User-defined parameters are "application" and "environment"

function print_usage() {
    echo "Usage: "
    echo "create-single-node.sh -a <application> -e <environment> [<options>]"
    echo ""
    echo "Required options: "
    echo "         -a <application name>"
    echo "         -e <environment name>"
    echo ""
    echo "<application name>-<environment name> will be prepended to kubernetes instance names"
    echo ""
    echo "Supported options: "
    echo "         -u <database user>, default: mariadb-admin"
    echo "         -p <database password>, default: autogenerated"
    # echo "         --zepp-user <zeppelin user>, default: zeppelin_user"
    # echo "         --zepp-password <zepplein password>, default: zeppelin_password"
    echo "         --dry-run generate yaml definitions only"
    echo "         -h print this screen"
    exit 1
}

function parse_options() {
    APP=""
    ENV=""
    DBUSER="admin"
    DBPWD=$(cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)
    ZEPPUSER="zeppelin_user"
    ZEPPPASS="zeppelin_pass"
    DRY_RUN=""

    while [[ $# -gt 0 ]]
    do

    key="$1"
    case $key in
        (-a|--app)
        APP="$2"
        shift
        shift
        ;;
        (-e|--env)
        ENV="$2"
        shift
        shift
        ;;
        (-u|--db-user)
        DBUSER="$2"
        shift
        shift
        ;;
        (-p|--db-pass)
        DBPWD="$2"
        shift
        shift
        ;;
        (--dry-run)
        DRY_RUN="--dry-run -o yaml"
        shift
        ;;
        (-h|*)
        print_usage
        ;;
    esac
    done

    if [[ -z "$APP" ]]; then
       print_usage
    fi

    if [[ -z "$ENV" ]]; then
       print_usage
    fi
}

function expand_templates() {
    # copy template files to a temp directory
    TEMPDIR=$(mktemp -d) 
    cp -r "$DIR/templates" "$TEMPDIR"
    for filename in $TEMPDIR/templates/*.yaml; do
        sed -e "s/{{APPLICATION}}/$APP/g" \
	    -e "s/{{ENVIRONMENT}}/$ENV/g" \
            -e "s/{{ADMIN_USERNAME}}/$(echo -n $DBUSER | base64)/g" \
            -e "s/{{ADMIN_PASSWORD}}/$(echo -n $DBPWD | base64)/g" \
            -e "s/{{ZEPPELIN_USERNAME}}/$(echo -n $ZEPPUSER | base64)/g" \
            -e "s/{{ZEPPELIN_PASSWORD}}/$(echo -n $ZEPPPASS | base64)/g" \
            -i '' $filename
    done

    TEMPLATE="$TEMPDIR/templates"
}

parse_options "$@"

# eval $(minikube docker-env)
# echo "attempts to build zeppelin docker image"
#docker build -t mariadb/columnstore_zeppelin ../../mariadb-columnstore-docker/columnstore_zeppelin/
# get directory of script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
KUBECTL=kubectl

expand_templates

if [ "$DRY_RUN" == "" ]; then
   $KUBECTL delete configmap mariadb-config 2> /dev/null
fi

set -e
# create configmaps for the configurations of the two types of service
echo "create configmaps for the configurations of the two types of service"
$KUBECTL create configmap mariadb-config --from-file="$TEMPLATE"/config/ $DRY_RUN
if [ "$DRY_RUN" != "" ]; then
   echo "---"
fi

# create the secret that holds user names and passwords
echo "create the secret that holds user names and passwords"
$KUBECTL create -f "$TEMPLATE"/mariadb-secret.yaml $DRY_RUN
if [ "$DRY_RUN" != "" ]; then
   echo "---"
fi

# create the single node as a stateful set (including service definitions)
echo "create the single node as a stateful set (including service definitions)"
$KUBECTL create -f "$TEMPLATE"/single.yaml $DRY_RUN
if [ "$DRY_RUN" != "" ]; then
   echo "---"
fi

# create the zeppelin container a stateful set (including service definitions)
echo "create the zeppelin container a stateful set (including service definitions)"
$KUBECTL create -f "$TEMPLATE"/zeppelin.yaml $DRY_RUN 
if [ "$DRY_RUN" != "" ]; then
   echo "---"
fi
# $KUBECTL get events -w
# cleanup temporary files
rm -R -f "$TEMPDIR"
# done
echo "start pods"

echo "Make sure you run $KUBECTL port-forward $APP-$ENV-mdb-zepp-0 8080:8080 in order to access Zeppelin" 
$KUBECTL get pods -l mariadb=$APP-$ENV --watch